<?php

return [
'CREATE TABLE `banned_chat_ip` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `ip` varchar(15) DEFAULT NULL,
  `datetime` datetime DEFAULT NULL,
  `reason` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ip` (`ip`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8',
'CREATE TABLE `blog_posts` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `author` varchar(100) DEFAULT NULL,
  `title` varchar(255) NOT NULL,
  `preview` text NOT NULL,
  `text` text,
  `files` text,
  `tags` varchar(300) DEFAULT NULL,
  `is_opened` int(1) NOT NULL DEFAULT \'0\',
  `pubdate` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8',
'INSERT INTO `blog_posts` VALUES("1", "Путин", "Заголовок 1", "<p>Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.</p>", "<p>Переменные, которые являются членами класса, называются &quot;свойства&quot;. Также их называют, используя другие термины, такие как &quot;атрибуты&quot; или &quot;поля&quot;, но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.</p>", "/audio/012020/Morning star.mp3.cda73cae5b6ec6b925db8a2fc9528cc9.mp3~~/audio/012020/On My Balcony.mp3.1ea9d1b3a0110bad45c1e428f29d1f19.mp3~~/audio/012020/Play.mp3.93a9715120c2842d5e2b013e320bb66a.mp3~~/audio/012020/Probably.mp3.5f0b9547dc3a19dfa9a51a7cf64eafc8.mp3~~/audio/012020/Queen Of The Underground.mp3.dea0d3fbdfed0c6a8c712caa4e3feedc.mp3~~/audio/012020/Ride.mp3.6e1dae616781705eaf56b2dc478d1f57.mp3~~/audio/012020/Six Seven Times.mp3.4369324ea6be3d5676b419fa0769890f.mp3~~/audio/012020/Spring to Kingdom come.mp3.03661e91c54d1b45954cc87bff219719.mp3", "Политика,Музыка", "1", "2020-04-09 00:01:00");',
'INSERT INTO `blog_posts` VALUES("2", "Патриарх Кирилл", "Заголовок 2", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "", "1", "2009-01-01 00:11:18");',
'INSERT INTO `blog_posts` VALUES("3", "BuZZeViLLy", "Заголовок 3", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "", "", "ИностранныеЯзыки", "1", "2009-01-01 00:24:40");',
'INSERT INTO `blog_posts` VALUES("4", "Патриарх Кирилл", "Заголовок 4", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Программирование", "1", "2009-01-01 00:32:58");',
'INSERT INTO `blog_posts` VALUES("5", "StupidKiller", "Заголовок 5", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Культура", "1", "2009-01-01 00:35:19");',
'INSERT INTO `blog_posts` VALUES("6", "Coco Shanel", "Заголовок 6", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Религия,Искусство", "1", "2009-01-01 00:50:27");',
'INSERT INTO `blog_posts` VALUES("7", "Fox", "Заголовок 7", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "", "1", "2009-01-01 00:56:36");',
'INSERT INTO `blog_posts` VALUES("8", "Anton Andreev", "Заголовок 8", "Сериализация объектов - сохранение объектов между сессиями", "", "", "", "1", "2009-01-01 00:58:46");',
'INSERT INTO `blog_posts` VALUES("9", "Гость", "Заголовок 9", "Сериализация объектов - сохранение объектов между сессиями", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Программирование,Социология", "0", "2009-01-01 01:08:06");',
'INSERT INTO `blog_posts` VALUES("10", "StupidKiller", "Заголовок 10", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Спорт", "1", "2009-01-01 01:14:05");',
'INSERT INTO `blog_posts` VALUES("11", "Патриарх Кирилл", "Заголовок 11", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "Замечание: При экспорте объекта var_export() не проверяет, реализует ли класс объекта метод __set_state(), поэтому повторный импорт таких объектов не будет выполнен, если метод __set_state() не реализован. В частности, это относится к некоторым внутренним классам. Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью лежит на разработчике.", "", "Религия", "1", "2009-01-01 01:24:54");',
'INSERT INTO `blog_posts` VALUES("12", "Змий", "Заголовок 12", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "Культура,Религия", "1", "2009-01-01 01:27:43");',
'INSERT INTO `blog_posts` VALUES("13", "Патриарх Кирилл", "Заголовок 13", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "", "1", "2009-01-01 01:32:29");',
'INSERT INTO `blog_posts` VALUES("14", "Coco Shanel", "Заголовок 14", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Искусство", "1", "2009-01-01 01:34:57");',
'INSERT INTO `blog_posts` VALUES("15", "BuglerV", "Заголовок 15", "Сериализация объектов - сохранение объектов между сессиями", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Социология,ИностранныеЯзыки,Медицина", "1", "2009-01-01 01:37:46");',
'INSERT INTO `blog_posts` VALUES("16", "BuZZeViLLy", "Заголовок 16", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "", "1", "2009-01-01 01:44:01");',
'INSERT INTO `blog_posts` VALUES("17", "Anton Andreev", "Заголовок 17", "Сериализация объектов - сохранение объектов между сессиями", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Кулинария", "1", "2009-01-01 01:59:44");',
'INSERT INTO `blog_posts` VALUES("18", "Патриарх Кирилл", "Заголовок 18", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "5.3.3	Изменено: Методы с тем же именем, что и последний элемент пространства имен класса больше не будут рассматриваться как конструктор. Это изменение не влияет классы, не использующие пространства имен.
5.3.0	Изменено: Больше не требуется, чтобы классы, реализующие интерфейсы с методами, которые имеют значения по умолчанию в прототипе, соответствовали значениям по умолчанию в интерфейсе.
5.3.0	Изменено: Теперь стало возможным ссылаться на класс, используя переменную (например, echo $classname::constant;). Значение переменной не может быть ключевым словом (например, self, parent или static).
5.3.0	Изменено: Ошибка E_WARNING происходит, если магические перегруженные методы объявлены как статические. Это также усиливает требование, что эти методы должны быть общедоступными.
5.3.0	Изменено: До 5.3.0, исключения в функции __autoload() не могли быть перехвачены в блоке catch и приводили к фатальной ошибке. Сейчас исключения в функции __autoload могут быть перехвачены в блоке catch, но с одной оговоркой. Если перехватывается пользовательское исключение, то класс, обрабатывающий это исключение, должен быть доступен. Функция __autoload может быть использована рекурсивно для автозагрузки пользовательского класса обработки исключения.
5.3.0	Добавлено: Метод __callStatic.", "", "Искусство", "1", "2009-01-01 02:15:55");',
'INSERT INTO `blog_posts` VALUES("19", "Админ", "Заголовок 19", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "ИностранныеЯзыки", "1", "2009-01-01 02:29:51");',
'INSERT INTO `blog_posts` VALUES("20", "Fox", "Заголовок 20", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "ИностранныеЯзыки,Религия", "1", "2009-01-01 02:43:14");',
'INSERT INTO `blog_posts` VALUES("21", "Гость", "Заголовок 21", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Философия", "0", "2009-01-01 02:51:29");',
'INSERT INTO `blog_posts` VALUES("22", "StupidKiller", "Заголовок 22", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Эзотерика", "1", "2009-01-01 02:58:48");',
'INSERT INTO `blog_posts` VALUES("23", "Coco Shanel", "Заголовок 23", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "ИностранныеЯзыки,История", "1", "2009-01-01 03:13:04");',
'INSERT INTO `blog_posts` VALUES("24", "Змий", "Заголовок 24", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "", "", "ИностранныеЯзыки", "1", "2009-01-01 03:23:58");',
'INSERT INTO `blog_posts` VALUES("25", "Патриарх Кирилл", "Заголовок 25", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "", "1", "2009-01-01 03:36:27");',
'INSERT INTO `blog_posts` VALUES("26", "BuZZeViLLy", "Заголовок 26", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Философия,Кулинария", "1", "2009-01-01 03:42:37");',
'INSERT INTO `blog_posts` VALUES("27", "Fox", "Заголовок 27", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "ИностранныеЯзыки", "1", "2009-01-01 03:44:22");',
'INSERT INTO `blog_posts` VALUES("28", "Змий", "Заголовок 28", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Культура", "1", "2009-01-01 03:55:46");',
'INSERT INTO `blog_posts` VALUES("29", "Иван Дурак", "Заголовок 29", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "", "0", "2009-01-01 03:59:24");',
'INSERT INTO `blog_posts` VALUES("30", "Патриарх Кирилл", "Заголовок 30", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Замечание: При экспорте объекта var_export() не проверяет, реализует ли класс объекта метод __set_state(), поэтому повторный импорт таких объектов не будет выполнен, если метод __set_state() не реализован. В частности, это относится к некоторым внутренним классам. Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью лежит на разработчике.", "", "Программирование", "1", "2009-01-01 04:03:04");',
'INSERT INTO `blog_posts` VALUES("31", "BuZZeViLLy", "Заголовок 31", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "", "1", "2009-01-01 04:17:51");',
'INSERT INTO `blog_posts` VALUES("32", "Гость", "Заголовок 32", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "", "0", "2009-01-01 04:20:21");',
'INSERT INTO `blog_posts` VALUES("33", "Путин", "Заголовок 33", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "", "1", "2009-01-01 04:25:18");',
'INSERT INTO `blog_posts` VALUES("34", "Иван Дурак", "Заголовок 34", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "Религия,Политика,Искусство", "0", "2009-01-01 04:37:37");',
'INSERT INTO `blog_posts` VALUES("35", "Патриарх Кирилл", "Заголовок 35", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "", "", "Искусство", "1", "2009-01-01 04:44:01");',
'INSERT INTO `blog_posts` VALUES("36", "Иван Дурак", "Заголовок 36", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Эзотерика", "0", "2009-01-01 04:57:42");',
'INSERT INTO `blog_posts` VALUES("37", "Coco Shanel", "Заголовок 37", "Сериализация объектов - сохранение объектов между сессиями", "", "", "Социология", "1", "2009-01-01 05:13:08");',
'INSERT INTO `blog_posts` VALUES("38", "Fox", "Заголовок 38", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "", "", "Политика", "1", "2009-01-01 05:16:00");',
'INSERT INTO `blog_posts` VALUES("39", "Иван Дурак", "Заголовок 39", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Религия", "0", "2009-01-01 05:22:02");',
'INSERT INTO `blog_posts` VALUES("40", "Путин", "Заголовок 40", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "Религия", "1", "2009-01-01 05:24:57");',
'INSERT INTO `blog_posts` VALUES("41", "Патриарх Кирилл", "Заголовок 41", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Медицина", "1", "2009-01-01 05:26:09");',
'INSERT INTO `blog_posts` VALUES("42", "Coco Shanel", "Заголовок 42", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "Медицина,Религия", "1", "2009-01-01 05:27:53");',
'INSERT INTO `blog_posts` VALUES("43", "BuglerV", "Заголовок 43", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Шизофрения", "1", "2009-01-01 05:35:47");',
'INSERT INTO `blog_posts` VALUES("44", "Гость", "Заголовок 44", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Религия,ИностранныеЯзыки,Кулинария", "0", "2009-01-01 05:36:27");',
'INSERT INTO `blog_posts` VALUES("45", "BuglerV", "Заголовок 45", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "Эзотерика,Политика", "1", "2009-01-01 05:38:47");',
'INSERT INTO `blog_posts` VALUES("46", "Змий", "Заголовок 46", "Сериализация объектов - сохранение объектов между сессиями", "5.3.3	Изменено: Методы с тем же именем, что и последний элемент пространства имен класса больше не будут рассматриваться как конструктор. Это изменение не влияет классы, не использующие пространства имен.
5.3.0	Изменено: Больше не требуется, чтобы классы, реализующие интерфейсы с методами, которые имеют значения по умолчанию в прототипе, соответствовали значениям по умолчанию в интерфейсе.
5.3.0	Изменено: Теперь стало возможным ссылаться на класс, используя переменную (например, echo $classname::constant;). Значение переменной не может быть ключевым словом (например, self, parent или static).
5.3.0	Изменено: Ошибка E_WARNING происходит, если магические перегруженные методы объявлены как статические. Это также усиливает требование, что эти методы должны быть общедоступными.
5.3.0	Изменено: До 5.3.0, исключения в функции __autoload() не могли быть перехвачены в блоке catch и приводили к фатальной ошибке. Сейчас исключения в функции __autoload могут быть перехвачены в блоке catch, но с одной оговоркой. Если перехватывается пользовательское исключение, то класс, обрабатывающий это исключение, должен быть доступен. Функция __autoload может быть использована рекурсивно для автозагрузки пользовательского класса обработки исключения.
5.3.0	Добавлено: Метод __callStatic.", "", "Философия", "1", "2009-01-01 05:41:41");',
'INSERT INTO `blog_posts` VALUES("47", "Змий", "Заголовок 47", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Кулинария,Религия", "1", "2009-01-01 05:47:25");',
'INSERT INTO `blog_posts` VALUES("48", "BuZZeViLLy", "Заголовок 48", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Политика", "1", "2009-01-01 06:01:13");',
'INSERT INTO `blog_posts` VALUES("49", "Путин", "Заголовок 49", "Сериализация объектов - сохранение объектов между сессиями", "", "", "", "1", "2009-01-01 06:15:42");',
'INSERT INTO `blog_posts` VALUES("50", "Админ", "Заголовок 50", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Замечание: При экспорте объекта var_export() не проверяет, реализует ли класс объекта метод __set_state(), поэтому повторный импорт таких объектов не будет выполнен, если метод __set_state() не реализован. В частности, это относится к некоторым внутренним классам. Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью лежит на разработчике.", "", "История", "1", "2009-01-01 06:31:10");',
'INSERT INTO `blog_posts` VALUES("51", "Anton Andreev", "Заголовок 51", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Программирование", "1", "2009-01-01 06:47:17");',
'INSERT INTO `blog_posts` VALUES("52", "Змий", "Заголовок 52", "Сериализация объектов - сохранение объектов между сессиями", "", "", "Социология", "1", "2009-01-01 07:01:08");',
'INSERT INTO `blog_posts` VALUES("53", "StupidKiller", "Заголовок 53", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Культура", "1", "2009-01-01 07:11:00");',
'INSERT INTO `blog_posts` VALUES("54", "Fox", "Заголовок 54", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "", "1", "2009-01-01 07:12:47");',
'INSERT INTO `blog_posts` VALUES("55", "Змий", "Заголовок 55", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Социология", "1", "2009-01-01 07:29:06");',
'INSERT INTO `blog_posts` VALUES("56", "BuZZeViLLy", "Заголовок 56", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "", "1", "2009-01-01 07:36:15");',
'INSERT INTO `blog_posts` VALUES("57", "Anton Andreev", "Заголовок 57", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Эзотерика,Философия", "1", "2009-01-01 07:52:07");',
'INSERT INTO `blog_posts` VALUES("58", "Гость", "Заголовок 58", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Кулинария", "0", "2009-01-01 07:54:59");',
'INSERT INTO `blog_posts` VALUES("59", "Иван Дурак", "Заголовок 59", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "", "0", "2009-01-01 08:06:48");',
'INSERT INTO `blog_posts` VALUES("60", "Coco Shanel", "Заголовок 60", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "", "1", "2009-01-01 08:12:05");',
'INSERT INTO `blog_posts` VALUES("61", "Anton Andreev", "Заголовок 61", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "", "1", "2009-01-01 08:24:29");',
'INSERT INTO `blog_posts` VALUES("62", "Патриарх Кирилл", "Заголовок 62", "Сериализация объектов - сохранение объектов между сессиями", "", "", "Искусство,ИностранныеЯзыки", "1", "2009-01-01 08:38:51");',
'INSERT INTO `blog_posts` VALUES("63", "Coco Shanel", "Заголовок 63", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Философия", "1", "2009-01-01 08:42:58");',
'INSERT INTO `blog_posts` VALUES("64", "Coco Shanel", "Заголовок 64", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "Шизофрения", "1", "2009-01-01 08:53:49");',
'INSERT INTO `blog_posts` VALUES("65", "StupidKiller", "Заголовок 65", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Спорт", "1", "2009-01-01 08:54:44");',
'INSERT INTO `blog_posts` VALUES("66", "Fox", "Заголовок 66", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "История", "1", "2009-01-01 08:58:47");',
'INSERT INTO `blog_posts` VALUES("67", "StupidKiller", "Заголовок 67", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Искусство", "1", "2009-01-01 09:08:43");',
'INSERT INTO `blog_posts` VALUES("68", "Coco Shanel", "Заголовок 68", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "Философия,Кулинария", "1", "2009-01-01 09:12:24");',
'INSERT INTO `blog_posts` VALUES("69", "BuZZeViLLy", "Заголовок 69", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Программирование", "1", "2009-01-01 09:20:10");',
'INSERT INTO `blog_posts` VALUES("70", "Змий", "Заголовок 70", "Сериализация объектов - сохранение объектов между сессиями", "", "", "Спорт", "1", "2009-01-01 09:25:00");',
'INSERT INTO `blog_posts` VALUES("71", "StupidKiller", "Заголовок 71", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Спорт", "1", "2009-01-01 09:34:14");',
'INSERT INTO `blog_posts` VALUES("72", "Anton Andreev", "Заголовок 72", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Философия", "1", "2009-01-01 09:48:37");',
'INSERT INTO `blog_posts` VALUES("73", "Гость", "Заголовок 73", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "", "0", "2009-01-01 09:51:34");',
'INSERT INTO `blog_posts` VALUES("74", "Змий", "Заголовок 74", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "Замечание: При экспорте объекта var_export() не проверяет, реализует ли класс объекта метод __set_state(), поэтому повторный импорт таких объектов не будет выполнен, если метод __set_state() не реализован. В частности, это относится к некоторым внутренним классам. Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью лежит на разработчике.", "", "Кулинария", "1", "2009-01-01 09:54:29");',
'INSERT INTO `blog_posts` VALUES("75", "Админ", "Заголовок 75", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "", "", "Программирование", "1", "2009-01-01 10:08:39");',
'INSERT INTO `blog_posts` VALUES("76", "BuglerV", "Заголовок 76", "Сериализация объектов - сохранение объектов между сессиями", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Эзотерика,Религия,Культура", "1", "2009-01-01 10:12:44");',
'INSERT INTO `blog_posts` VALUES("77", "Anton Andreev", "Заголовок 77", "Сериализация объектов - сохранение объектов между сессиями", "", "", "", "1", "2009-01-01 10:16:59");',
'INSERT INTO `blog_posts` VALUES("78", "StupidKiller", "Заголовок 78", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Шизофрения,Эзотерика,Искусство", "1", "2009-01-01 10:29:17");',
'INSERT INTO `blog_posts` VALUES("79", "BuglerV", "Заголовок 79", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Шизофрения", "1", "2009-01-01 10:39:47");',
'INSERT INTO `blog_posts` VALUES("80", "Coco Shanel", "Заголовок 80", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "", "", "Шизофрения", "1", "2009-01-01 10:52:48");',
'INSERT INTO `blog_posts` VALUES("81", "Anton Andreev", "Заголовок 81", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Спорт", "1", "2009-01-01 11:07:15");',
'INSERT INTO `blog_posts` VALUES("82", "Anton Andreev", "Заголовок 82", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "", "", "", "1", "2009-01-01 11:10:08");',
'INSERT INTO `blog_posts` VALUES("83", "Змий", "Заголовок 83", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "Замечание: При экспорте объекта var_export() не проверяет, реализует ли класс объекта метод __set_state(), поэтому повторный импорт таких объектов не будет выполнен, если метод __set_state() не реализован. В частности, это относится к некоторым внутренним классам. Необходимость проверки, реализует ли импортируемый класс метод __set_state(), полностью лежит на разработчике.", "", "", "1", "2009-01-01 11:21:07");',
'INSERT INTO `blog_posts` VALUES("84", "Fox", "Заголовок 84", "Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является \"передача объектов по ссылке по умолчанию\".", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "Политика", "1", "2009-01-01 11:36:43");',
'INSERT INTO `blog_posts` VALUES("85", "Змий", "Заголовок 85", "Сериализация объектов - сохранение объектов между сессиями", "", "", "История,Кулинария", "1", "2009-01-01 11:48:41");',
'INSERT INTO `blog_posts` VALUES("86", "Змий", "Заголовок 86", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "Шизофрения", "1", "2009-01-01 11:52:09");',
'INSERT INTO `blog_posts` VALUES("87", "StupidKiller", "Заголовок 87", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Переменные, которые являются членами класса, называются \"свойства\". Также их называют, используя другие термины, такие как \"атрибуты\" или \"поля\", но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.", "", "Политика", "1", "2009-01-01 12:04:38");',
'INSERT INTO `blog_posts` VALUES("88", "BuZZeViLLy", "Заголовок 88", "Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.", "5.3.3	Изменено: Методы с тем же именем, что и последний элемент пространства имен класса больше не будут рассматриваться как конструктор. Это изменение не влияет классы, не использующие пространства имен.
5.3.0	Изменено: Больше не требуется, чтобы классы, реализующие интерфейсы с методами, которые имеют значения по умолчанию в прототипе, соответствовали значениям по умолчанию в интерфейсе.
5.3.0	Изменено: Теперь стало возможным ссылаться на класс, используя переменную (например, echo $classname::constant;). Значение переменной не может быть ключевым словом (например, self, parent или static).
5.3.0	Изменено: Ошибка E_WARNING происходит, если магические перегруженные методы объявлены как статические. Это также усиливает требование, что эти методы должны быть общедоступными.
5.3.0	Изменено: До 5.3.0, исключения в функции __autoload() не могли быть перехвачены в блоке catch и приводили к фатальной ошибке. Сейчас исключения в функции __autoload могут быть перехвачены в блоке catch, но с одной оговоркой. Если перехватывается пользовательское исключение, то класс, обрабатывающий это исключение, должен быть доступен. Функция __autoload может быть использована рекурсивно для автозагрузки пользовательского класса обработки исключения.
5.3.0	Добавлено: Метод __callStatic.", "", "Религия,ИностранныеЯзыки", "1", "2009-01-01 12:07:44");',
'INSERT INTO `blog_posts` VALUES("89", "Anton Andreev", "Заголовок 89", "PHP оставляет за собой право все методы, начинающиеся с __, считать магическими. Не рекомендуется использовать имена методов с __ в PHP, если вы не желаете магическую функциональность.", "", "", "Политика", "1", "2009-01-01 12:08:15");',
'INSERT INTO `blog_posts` VALUES("90", "Патриарх Кирилл", "Заголовок 90", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "История", "1", "2009-01-01 12:23:40");',
'INSERT INTO `blog_posts` VALUES("91", "StupidKiller", "Заголовок 91", "Сериализация объектов - сохранение объектов между сессиями", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "Культура,Спорт", "1", "2009-01-01 12:31:54");',
'INSERT INTO `blog_posts` VALUES("92", "Иван Дурак", "Заголовок 92", "<p><img alt=\"\" src=\"/image/012020/Штам.png.313145c755bd0d6abbefdb87c24635c9.png\" /></p>", "", "", "Социология", "0", "2009-01-01 12:43:00");',
'INSERT INTO `blog_posts` VALUES("93", "Coco Shanel", "Заголовок 93", "Возвращает кумулятивную функцию бета-распределения, обратную ей или один из своих параметров. Вид возвращаемого значения и параметров (par1, par2 и par3) определяются параметром which.", "Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения.

Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.", "", "", "1", "2009-01-01 12:48:03");',
'INSERT INTO `blog_posts` VALUES("94", "", "Заголовок 94", "<p>dfsfsdfsdfsdfs</p>", "", "/audio/122019/If We Kiss.mp3.058f92b9fb6a5cde06372f5a5c20d516.mp3~~/audio/122019/I\'ve been waiting all my life to leave you.mp3.d3703bc6e04123f4a40ee18e6ffd5e9a.mp3~~/audio/122019/Magic Potion.mp3.54b412d4dee774bc8bee70be8d0fd8a2.mp3", "Программирование,Музыка", "1", "2009-01-01 12:56:00");',
'INSERT INTO `blog_posts` VALUES("95", "Anton Andreev", "Заголовок 95", "Сериализация объектов - сохранение объектов между сессиями", "Для того, чтобы иметь возможность сделать unserialize() для объекта нужно чтобы класс этого объекта был определен заранее. То есть, если у вас есть экземпляр класса А, и вы сделаете его сериализацию, вы получите его строковое представление, которое содержит значение всех переменных, содержащихся в нем. Для того, чтобы восcтановить объект из строки в другом PHP-файле класс A должен быть определен заранее. Это можно сделать, например, путем сохранения определения класса A в отдельный файл и подключить этот файл или использовать функцию spl_autoload_register() для автоматического подключения.", "", "", "1", "2009-01-01 13:06:25");',
'INSERT INTO `blog_posts` VALUES("96", "Anton Andreev", "Заголовок 96", "С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.", "", "", "Спорт", "1", "2009-01-01 13:21:10");',
'INSERT INTO `blog_posts` VALUES("97", "Админ", "Заголовок 97", "<p>Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выпол.</p>
", "<p>Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5 по-прежнему позволяет использовать ключевое слово var при определении свойств вместо (или в дополнении к) public, protected, или private. Однако var больше не требуется. В версиях PHP с 5.0 по 5.1.3 использование var считалось устаревшим и выдавало предупреждение E_STRICT, но с PHP 5.1.3 больше не считается устаревшим и не выдает предупреждения. Если вы объявляете свойство с помощью var вместо public, protected или private, тогда PHP 5 будет рассматривать свойство так, как если оно было объявлено как public.</p>
", "", "Социология,ИностранныеЯзыки", "1", "2009-01-01 13:37:00");',
'INSERT INTO `blog_posts` VALUES("98", "Гость", "Заголовок 98", "<p>Метод __toString() позволяет классу решать, как он должен реагировать при преобразовании в строку. Например, что вывести при выполнении echo $obj;.</p>
", "", "https://www.grad-petrov.ru/wp-content/uploads/2019/12/rep-varl-2019-12-13-vstrecha-s-Kirillom-Aleksandrovym.mp3", "Религия", "0", "2019-11-06 00:00:00");',
'INSERT INTO `blog_posts` VALUES("99", "Админ", "Заголовок 99", "<p>С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.</p>
", "<p>Переменные, которые являются членами класса, называются &quot;свойства&quot;. Также их называют, используя другие термины, такие как &quot;атрибуты&quot; или &quot;поля&quot;, но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов public, protected или private, следуя правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.</p>
", "", "Философия,Шизофрения", "1", "2009-01-02 13:49:00");',
'INSERT INTO `blog_posts` VALUES("100", "StupidKiller", "Заголовок 100", "<p>С другой стороны, функция unserialize() проверяет наличие метода с магическим именем __wakeup(). Если она имеется, эта функция может восстанавливать любые ресурсы, которые может иметь объект.</p>", "<p>sdkfsidfjido ываоывал одалоыва вао ыва ыовад ывоадылвоады ва ываю.</p>", "/audio/122019/All my dreams on hold.mp3.6d2b42b08b63aaeade7b97b8d8382c74.mp3~~/audio/122019/Everything Is Ending Here.mp3.52cfc8448a5dacd1111969cf66d120d5.mp3~~/audio/032020/Billie Eilish - No Time To Die.mp3.58232d13a7e5d38fa0d0c58f31105128.mp3", "Искусство,Музыка", "1", "2019-12-28 12:12:00");',
'CREATE TABLE `chat` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `text` text,
  `ip` varchar(15) DEFAULT NULL,
  `type` varchar(50) NOT NULL DEFAULT \'guest\',
  `datetime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=75 DEFAULT CHARSET=utf8',
'INSERT INTO `chat` VALUES("7", "4", "", "", "delete", "2020-03-09 19:11:12");',
'INSERT INTO `chat` VALUES("8", "2", "", "", "delete", "2020-03-09 19:13:31");',
'INSERT INTO `chat` VALUES("9", "3", "", "", "delete", "2020-03-09 19:15:49");',
'INSERT INTO `chat` VALUES("12", "5", "", "", "delete", "2020-03-09 21:53:25");',
'INSERT INTO `chat` VALUES("16", "14", "", "", "delete", "2020-03-10 11:26:42");',
'INSERT INTO `chat` VALUES("17", "15", "", "", "delete", "2020-03-10 11:27:38");',
'INSERT INTO `chat` VALUES("19", "18", "", "", "delete", "2020-03-10 11:29:15");',
'INSERT INTO `chat` VALUES("21", "20", "", "", "delete", "2020-03-10 11:29:39");',
'INSERT INTO `chat` VALUES("23", "22", "", "", "delete", "2020-03-10 11:29:59");',
'INSERT INTO `chat` VALUES("24", "6", "", "", "delete", "2020-03-10 11:30:02");',
'INSERT INTO `chat` VALUES("26", "25", "", "", "delete", "2020-03-10 11:45:33");',
'INSERT INTO `chat` VALUES("28", "27", "", "", "delete", "2020-03-10 12:41:15");',
'INSERT INTO `chat` VALUES("30", "29", "", "", "delete", "2020-03-10 12:45:15");',
'INSERT INTO `chat` VALUES("32", "31", "", "", "delete", "2020-03-10 13:06:26");',
'INSERT INTO `chat` VALUES("33", "1", "", "", "delete", "2020-03-10 13:32:09");',
'INSERT INTO `chat` VALUES("34", "10", "", "", "delete", "2020-03-10 13:32:12");',
'INSERT INTO `chat` VALUES("35", "11", "", "", "delete", "2020-03-10 13:32:14");',
'INSERT INTO `chat` VALUES("36", "13", "", "", "delete", "2020-03-10 13:32:16");',
'INSERT INTO `chat` VALUES("38", "37", "", "", "delete", "2020-03-10 13:34:38");',
'INSERT INTO `chat` VALUES("48", "40", "", "", "delete", "2020-03-10 20:08:30");',
'INSERT INTO `chat` VALUES("49", "44", "", "", "delete", "2020-03-10 20:08:45");',
'INSERT INTO `chat` VALUES("50", "46", "", "", "delete", "2020-03-10 20:08:49");',
'INSERT INTO `chat` VALUES("51", "43", "", "", "delete", "2020-03-10 20:08:58");',
'INSERT INTO `chat` VALUES("52", "45", "", "", "delete", "2020-03-10 20:09:01");',
'INSERT INTO `chat` VALUES("53", "47", "", "", "delete", "2020-03-10 20:09:08");',
'INSERT INTO `chat` VALUES("54", "41", "", "", "delete", "2020-03-10 20:11:34");',
'INSERT INTO `chat` VALUES("55", "42", "", "", "delete", "2020-03-10 20:11:39");',
'INSERT INTO `chat` VALUES("62", "56", "", "", "delete", "2020-03-11 12:14:58");',
'INSERT INTO `chat` VALUES("63", "57", "", "", "delete", "2020-03-11 12:15:00");',
'INSERT INTO `chat` VALUES("64", "58", "", "", "delete", "2020-03-11 12:15:02");',
'INSERT INTO `chat` VALUES("65", "59", "", "", "delete", "2020-03-11 12:15:03");',
'INSERT INTO `chat` VALUES("66", "60", "", "", "delete", "2020-03-11 12:15:05");',
'INSERT INTO `chat` VALUES("67", "61", "", "", "delete", "2020-03-11 12:15:07");',
'INSERT INTO `chat` VALUES("70", "69", "", "", "delete", "2020-03-11 12:18:12");',
'INSERT INTO `chat` VALUES("71", "68", "", "", "delete", "2020-03-11 12:18:16");',
'INSERT INTO `chat` VALUES("73", "72", "", "", "delete", "2020-03-11 12:19:09");',
'INSERT INTO `chat` VALUES("74", "39", "", "", "delete", "2020-04-03 10:26:38");',
'CREATE TABLE `chat_tokens` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ip` varchar(15) DEFAULT NULL,
  `token` varchar(40) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=utf8',
'INSERT INTO `chat_tokens` VALUES("123", "127.0.0.1", "====d86734608fb796348f33630d7be72e3c====");',
'CREATE TABLE `events` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `text` text,
  `look` text,
  `date` date NOT NULL,
  `time` time NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8',
'INSERT INTO `events` VALUES("7", "Покормить котенка", "", "", "2020-01-03", "12:00:00");',
'INSERT INTO `events` VALUES("8", "Заработать на кукурузу", "", "", "2020-01-02", "16:55:00");',
'INSERT INTO `events` VALUES("9", "Послушать версию", "", "", "2020-01-02", "11:16:00");',
'INSERT INTO `events` VALUES("10", "Вспомнить пароль", "<table border=\"1\" cellspacing=\"1\" cellpadding=\"1\" style=\"width:100%\"><tbody><tr><td>123</td><td>345</td></tr><tr><td>nm,</td><td>dfg</td></tr><tr><td>xcv</td><td>ghj</td></tr></tbody></table><p>&nbsp;</p>", "<p style=\"text-align: center;\"><img alt=\"\" src=\"/image/012020/place.jpg.a1b0dc49ae3c929eca87559119131de2.jpeg\" style=\"height:225px; width:225px\" /></p><p>Сегодня состоится событие.</p>", "2020-02-12", "15:23:00");',
'INSERT INTO `events` VALUES("11", "Празднуем", "<p>Проблемы с новым годом.</p>", "<p style=\"text-align: center;\"><img alt=\"\" src=\"/image/012020/Санта.png.5ae9b5a0651965be84c0ad204abdfe94.png\" style=\"height:136px; width:200px\" /></p><p>Новый год нынче не очень...</p>", "2020-01-15", "00:05:00");',
'INSERT INTO `events` VALUES("12", "Покормить котенка", "", "", "2020-02-02", "21:57:00");',
'INSERT INTO `events` VALUES("14", "Послушать версию не совсем легальными методами", "<p><img alt=\"\" src=\"/image/022020/DSC_1505.JPG.0b08208cfba56ce6fd6b8a99a10a0c96.jpeg\" style=\"width:100%\" /></p>", "<p>gfgdfgljdgdjf lkdfgd jfg jg lfgjg&nbsp;</p><p>&nbsp;kl jflgjdkl gjf kj lfj kldj kljgkljggk jd</p><p>lkjd kldj lgjfgfjkgd</p>", "2020-02-16", "23:30:00");',
'INSERT INTO `events` VALUES("15", "Заработать на кукурузу", "<p>ываыалдывоаыао<img alt=\"\" src=\"/image/032020/1.jpg.26593394ec8db4c8b8ef53147e27651e.jpeg\" style=\"float:right; width:50%\" /></p>", "<p>ывлыоадылоадыуаодаоыад</p>", "2020-03-12", "21:39:00");',
'CREATE TABLE `modules` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `enabled` int(1) NOT NULL DEFAULT \'0\',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8',
'INSERT INTO `modules` VALUES("1", "core", "1");',
'INSERT INTO `modules` VALUES("2", "blog", "1");',
'INSERT INTO `modules` VALUES("3", "quotes", "1");',
'INSERT INTO `modules` VALUES("4", "events", "1");',
'CREATE TABLE `quotes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(100) DEFAULT NULL,
  `quote` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8',
'INSERT INTO `quotes` VALUES("1", "Фридрих Ницше", "<p>Что не убивает меня,<br />
то делает меня сильнее.</p>
");',
'INSERT INTO `quotes` VALUES("3", "Фридрих Ницше", "Кто сражается с чудовищами, тому следует остерегаться, чтобы самому при этом не стать чудовищем.");',
'INSERT INTO `quotes` VALUES("4", "Фридрих Ницше", "И если ты долго смотришь в бездну, то бездна тоже смотрит в тебя.");',
'INSERT INTO `quotes` VALUES("5", "Фридрих Ницше", "Если вы решили действовать — закройте двери для сомнений.");',
'INSERT INTO `quotes` VALUES("6", "Фридрих Ницше", "И если у тебя нет больше ни одной лестницы, ты должен научиться взбираться на собственную голову: как же иначе хотел бы ты подняться выше?");',
'INSERT INTO `quotes` VALUES("7", "Фридрих Ницше", "Смерть достаточно близка, чтобы можно было не страшиться жизни.");',
'INSERT INTO `quotes` VALUES("8", "Фридрих Ницше", "Много говорить о себе — тоже способ себя скрывать.");',
'INSERT INTO `quotes` VALUES("9", "Фридрих Ницше", "Величайшие события — это не наши самые шумные, а наши самые тихие часы.");',
'INSERT INTO `quotes` VALUES("10", "Фридрих Ницше", "То, что делается ради любви, происходит вне сферы добра и зла.");',
'INSERT INTO `quotes` VALUES("11", "Фридрих Ницше", "Есть два пути избавить вас от страдания: быстрая смерть и продолжительная любовь.");',
'INSERT INTO `quotes` VALUES("12", "Фридрих Ницше", "Чем свободнее и сильнее индивидуум, тем взыскательнее становится его любовь.");',
'INSERT INTO `quotes` VALUES("13", "Фридрих Ницше", "Не через взаимную любовь прекращается несчастье неразделенной любви, но через большую любовь.");',
'INSERT INTO `quotes` VALUES("14", "Фридрих Ницше", "Двух вещей хочет настоящий мужчина: опасности и игры. И потому он ищет женщину, как самую опасную игрушку.");',
'INSERT INTO `quotes` VALUES("15", "Фридрих Ницше", "Счастье мужчины называется: я хочу. Счастье женщины называется: он хочет.");',
'INSERT INTO `quotes` VALUES("16", "Фридрих Ницше", "«Возлюби ближнего своего» — это значит прежде всего: «Оставь ближнего своего в покое!» — И как раз эта деталь добродетели связана с наибольшими трудностями.");',
'INSERT INTO `quotes` VALUES("17", "Фридрих Ницше", "Даже у Бога есть свой ад — это любовь его к людям.");',
'INSERT INTO `quotes` VALUES("18", "Фридрих Ницше", "Кто хочет оправдать существование, тому надобно еще и уметь быть адвокатом Бога перед дьяволом.");',
'INSERT INTO `quotes` VALUES("19", "Фридрих Ницше", "Есть степень заядлой лживости, которую называют «чистой совестью».");',
'INSERT INTO `quotes` VALUES("20", "Фридрих Ницше", "Что хорошо? Все, что повышает чувство власти, волю к власти, власть в человеке. Что дурно? Все, что происходит из слабости.");',
'INSERT INTO `quotes` VALUES("22", "Фридрих Ницше", "С человеком происходит то же, что и с деревом. Чем больше стремится он вверх, к свету, тем глубже впиваются корни его в землю, вниз, в мрак и глубину, — ко злу.");',
'INSERT INTO `quotes` VALUES("23", "Фридрих Ницше", "Человек — это канат, натянутый между животным и сверхчеловеком, — канат над пропастью. В человеке ценно то, что он мост, а не цель.");',
'INSERT INTO `quotes` VALUES("24", "Фридрих Ницше", "Стыдиться своей безнравственности — это первая ступень лестницы, на вершине которой будешь стыдиться своей нравственности.");',
'INSERT INTO `quotes` VALUES("25", "Китайская мудрость", "Если кто-то знает, что он не знает — научи его.
Если кто-то знает, что он знает — послушай его.
Если кто-то не знает, что он знает — разбуди его.
Если кто-то не знает, что он не знает — беги от него.");',
'INSERT INTO `quotes` VALUES("26", "Китайская мудрость", "Невидимой красной нитью соединены те, кому суждено встретиться, несмотря на время, место и обстоятельства. Нить может растянуться или спутаться, но никогда не порвется.");',
'INSERT INTO `quotes` VALUES("27", "Китайская мудрость", "Ты сказал — я поверил, ты повторил — я засомневался, ты стал настаивать, и я понял, что ты лжёшь.");',
'INSERT INTO `quotes` VALUES("28", "Китайская мудрость", "Человек, который смог сдвинуть гору, начинал с того, что перетаскивал с места на место мелкие камешки.");',
'INSERT INTO `quotes` VALUES("29", "Китайская мудрость", "Если ты споткнулся и упал, это ещё не значит, что ты идёшь не туда.");',
'INSERT INTO `quotes` VALUES("30", "Китайская мудрость", "Тот, кто указывает на твои недостатки, не всегда твой враг;
тот, кто говорит о твоих достоинствах, не всегда твой друг.");',
'INSERT INTO `quotes` VALUES("31", "Китайская мудрость", "Живи, сохраняя покой. Придет весна, и цветы распустятся сами.");',
'INSERT INTO `quotes` VALUES("32", "Китайская мудрость", "Искушение сдаться будет особенно сильным незадолго до победы.");',
'INSERT INTO `quotes` VALUES("33", "Китайская мудрость", "Тому, кто никуда не плывёт, — не бывает попутного ветра!");',
'INSERT INTO `quotes` VALUES("34", "Китайская мудрость", "Не бойся продвигаться медленно, бойся стоять на месте.");',
'INSERT INTO `quotes` VALUES("35", "Китайская мудрость", "Не говорите, если это не изменяет тишину к лучшему.");',
'INSERT INTO `quotes` VALUES("36", "Китайская мудрость", "Как правило, ты боишься совсем не того, чего следует.");',
'INSERT INTO `quotes` VALUES("37", "Китайская мудрость", "Слово, которое ты не сказал, — твой раб, а высказанное — становится твоим господином.");',
'INSERT INTO `quotes` VALUES("38", "Китайская мудрость", "Надо поспешно делать то, что не так важно, чтобы делать не спеша то, что важно.");',
'INSERT INTO `quotes` VALUES("39", "Китайская мудрость", "Хитрость жизни в том, чтобы умереть молодым, но как можно позже.");',
'INSERT INTO `quotes` VALUES("40", "Ксения Собчак", "Самые ничтожные люди те, кто пытается окружить себя менее успешными людьми, чтобы выделиться на их фоне.");',
'INSERT INTO `quotes` VALUES("42", "Ксения Собчак", "Люди делятся на две категории: одни наслаждаются жизнью, а вторые смотрят на них. И завидуют.");',
'INSERT INTO `quotes` VALUES("43", "Ксения Собчак", "Всегда не бойтесь говорить правду, порой это дорого стоит, но позволяет чувствовать себя человеком.");',
'INSERT INTO `quotes` VALUES("44", "Ксения Собчак", "Если ты не знаешь, как ухаживать за собой, то какая вообще из тебя женщина!");',
'INSERT INTO `quotes` VALUES("45", "Ксения Собчак", "Статистика как бикини: показывает много, но скрывает самое интересное.");',
'INSERT INTO `quotes` VALUES("47", "Ксения Собчак", "Это не друзья, таких друзей за одно место и в музей...");',
'INSERT INTO `quotes` VALUES("48", "Ксения Собчак", "Восприятие того или иного произведения, человека, продукта — это уже не ответственность автора.");',
'INSERT INTO `quotes` VALUES("49", "BuglerV", "<p>Прекрасно...</p>
");',
'INSERT INTO `quotes` VALUES("50", "BuglerV", "<p>Не все прекрасно в Датском королевстве.</p>
");',
'CREATE TABLE `settings` (
  `id` int(5) NOT NULL AUTO_INCREMENT,
  `key` varchar(50) NOT NULL,
  `value` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8',
'INSERT INTO `settings` VALUES("2", "siteName", "Солнце-Севера");',
'INSERT INTO `settings` VALUES("3", "blog_max_posts", "10");',
'INSERT INTO `settings` VALUES("4", "djName", "Черепаха");',
'INSERT INTO `settings` VALUES("5", "i18n_debug", "");',
'INSERT INTO `settings` VALUES("6", "radio_enabled", "1");',
'INSERT INTO `settings` VALUES("7", "window_links", "<p>google.com</p><p>yandex.ru</p><p>regionofmafia.ru</p>");',
'INSERT INTO `settings` VALUES("8", "radio_source", "http://46.105.180.202:8077/stream");',
'CREATE TABLE `translate` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `module` varchar(20) NOT NULL,
  `domain` varchar(20) NOT NULL,
  `lang` varchar(3) NOT NULL,
  `word` varchar(50) NOT NULL,
  `translate` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=105 DEFAULT CHARSET=utf8',
'INSERT INTO `translate` VALUES("1", "blog", "form", "ru", "blog_max_posts", "Количество постов");',
'INSERT INTO `translate` VALUES("2", "blog", "form", "ru", "blog_max_posts_info", "Количество сообщений блога, которые будут отображены на одной странице. Если всего сообщений больше, чем указано в параметре, то будет добавлен пагинатор.");',
'INSERT INTO `translate` VALUES("3", "blog", "form", "ru", "blog_new_title", "Заголовок новости");',
'INSERT INTO `translate` VALUES("4", "blog", "form", "ru", "blog_new_title_info", "Заголовок новости");',
'INSERT INTO `translate` VALUES("5", "blog", "form", "ru", "blog_new_author", "Автор");',
'INSERT INTO `translate` VALUES("6", "blog", "form", "ru", "blog_new_author_info", "");',
'INSERT INTO `translate` VALUES("7", "blog", "form", "ru", "blog_new_files", "Аудио файлы");',
'INSERT INTO `translate` VALUES("8", "blog", "form", "ru", "blog_new_files_info", "");',
'INSERT INTO `translate` VALUES("9", "blog", "form", "ru", "blog_new_attachments", "Загрузить");',
'INSERT INTO `translate` VALUES("10", "blog", "form", "ru", "blog_new_attachments_info", "");',
'INSERT INTO `translate` VALUES("11", "blog", "form", "ru", "blog_new_text", "Статья");',
'INSERT INTO `translate` VALUES("12", "blog", "form", "ru", "blog_new_text_info", "Текст, который будет показан пользователям только при нажатии ими кнопки \"Далее\" или \"Прочитать\".");',
'INSERT INTO `translate` VALUES("13", "blog", "form", "ru", "blog_new_preview", "Превью текст");',
'INSERT INTO `translate` VALUES("14", "blog", "form", "ru", "blog_new_preview_info", "Текст, который будет показан пользователям при просмотре блога новостей. Максимальная длинна - 200 символов.");',
'INSERT INTO `translate` VALUES("15", "blog", "form", "ru", "blog_new_tags", "Теги");',
'INSERT INTO `translate` VALUES("16", "blog", "form", "ru", "blog_new_tags_info", "Теги новости для быстрого поиска.");',
'INSERT INTO `translate` VALUES("17", "blog", "form", "ru", "blog_new_is_opened", "Открыть");',
'INSERT INTO `translate` VALUES("18", "blog", "form", "ru", "blog_new_is_opened_info", "Показывать ли данную новость пользователям.");',
'INSERT INTO `translate` VALUES("19", "blog", "form", "ru", "blog_new_pubdate", "Дата публикации");',
'INSERT INTO `translate` VALUES("20", "blog", "form", "ru", "blog_new_pubdate_info", "");',
'INSERT INTO `translate` VALUES("21", "blog", "main", "ru", "blog_main_title", "Новости");',
'INSERT INTO `translate` VALUES("22", "blog", "main", "ru", "blog_main_whom", "новость");',
'INSERT INTO `translate` VALUES("23", "blog", "main", "ru", "blog_hide_show", "Показать/Скрыть");',
'INSERT INTO `translate` VALUES("24", "blog", "main", "ru", "blog_will_post", "Будет опубликовано");',
'INSERT INTO `translate` VALUES("25", "blog", "main", "ru", "blog_now_post", "Опубликовано");',
'INSERT INTO `translate` VALUES("26", "blog", "main", "ru", "blog_post_author", "Автор");',
'INSERT INTO `translate` VALUES("27", "blog", "main", "ru", "blog_post_tags", "Тэги");',
'INSERT INTO `translate` VALUES("28", "blog", "main", "ru", "blog_search_placeholder", "Текст для поиска");',
'INSERT INTO `translate` VALUES("29", "blog", "main", "ru", "blog_search_go", "Искать");',
'INSERT INTO `translate` VALUES("30", "blog", "main", "ru", "blog_search_title", "Название");',
'INSERT INTO `translate` VALUES("31", "blog", "main", "ru", "blog_search_author", "Автор");',
'INSERT INTO `translate` VALUES("32", "blog", "main", "ru", "blog_search_tags", "Теги");',
'INSERT INTO `translate` VALUES("33", "blog", "main", "ru", "blog_search_text", "Текст");',
'INSERT INTO `translate` VALUES("34", "blog", "main", "ru", "blog_history_next", ">");',
'INSERT INTO `translate` VALUES("35", "blog", "main", "ru", "blog_history_prev", "<");',
'INSERT INTO `translate` VALUES("36", "core", "form", "ru", "submit", "Сохранить");',
'INSERT INTO `translate` VALUES("37", "core", "form", "ru", "password", "Пароль");',
'INSERT INTO `translate` VALUES("38", "core", "form", "ru", "password_info", "sdkfs ljfsdf jksd lfjkfsdl jkfsdl jkd");',
'INSERT INTO `translate` VALUES("39", "core", "form", "ru", "username", "Имя");',
'INSERT INTO `translate` VALUES("40", "core", "form", "ru", "username_info", "sdfkjsdfkj klsdjfskldjf kljfsd kljsdfksdfk jsdlfksjd lk");',
'INSERT INTO `translate` VALUES("41", "core", "form", "ru", "siteName", "Название сайта");',
'INSERT INTO `translate` VALUES("42", "core", "form", "ru", "siteName_info", "То, что будет показываться в шапке форума и в названии вкладки браузера.");',
'INSERT INTO `translate` VALUES("43", "core", "form", "ru", "djName", "Диджей");',
'INSERT INTO `translate` VALUES("44", "core", "form", "ru", "djName_info", "");',
'INSERT INTO `translate` VALUES("45", "core", "form", "ru", "radio_enabled", "Включить радио");',
'INSERT INTO `translate` VALUES("46", "core", "form", "ru", "radio_enabled_info", "");',
'INSERT INTO `translate` VALUES("47", "core", "form", "ru", "i18n_debug", "Дебаг перевода");',
'INSERT INTO `translate` VALUES("48", "core", "form", "ru", "i18n_debug_info", "");',
'INSERT INTO `translate` VALUES("49", "core", "form", "ru", "window_links", "Ссылки");',
'INSERT INTO `translate` VALUES("50", "core", "form", "ru", "window_links_info", "");',
'INSERT INTO `translate` VALUES("51", "core", "link", "ru", "link_main_title", "Ссылки");',
'INSERT INTO `translate` VALUES("52", "core", "link", "ru", "link_main_whom", "событие");',
'INSERT INTO `translate` VALUES("53", "core", "main", "ru", "crud_all", "Все");',
'INSERT INTO `translate` VALUES("54", "core", "main", "ru", "crud_new", "Добавить");',
'INSERT INTO `translate` VALUES("55", "core", "main", "ru", "crud_change", "Редактировать");',
'INSERT INTO `translate` VALUES("56", "core", "main", "ru", "crud_delete", "Удалить");',
'INSERT INTO `translate` VALUES("57", "core", "main", "ru", "admin_logout", "Выйти");',
'INSERT INTO `translate` VALUES("58", "core", "main", "ru", "admin_home", "Главная");',
'INSERT INTO `translate` VALUES("59", "core", "main", "ru", "admin_admin", "Админка");',
'INSERT INTO `translate` VALUES("60", "core", "main", "ru", "admin_settings", "Настройки");',
'INSERT INTO `translate` VALUES("61", "core", "paginator", "ru", "paginator_first", "Первая");',
'INSERT INTO `translate` VALUES("62", "core", "paginator", "ru", "paginator_last", "Последняя");',
'INSERT INTO `translate` VALUES("63", "core", "paginator", "ru", "paginator_prev", "<<");',
'INSERT INTO `translate` VALUES("64", "core", "paginator", "ru", "paginator_next", ">>");',
'INSERT INTO `translate` VALUES("65", "core", "paginator", "ru", "paginator_go", "Перейти");',
'INSERT INTO `translate` VALUES("66", "core", "radio", "ru", "radio_play", "PLAY");',
'INSERT INTO `translate` VALUES("67", "core", "radio", "ru", "radio_pause", "PAUSE");',
'INSERT INTO `translate` VALUES("68", "core", "radio", "ru", "radio_plus", "VOL+");',
'INSERT INTO `translate` VALUES("69", "core", "radio", "ru", "radio_minus", "VOL-");',
'INSERT INTO `translate` VALUES("70", "core", "radio", "ru", "radio_radio", "RADIO");',
'INSERT INTO `translate` VALUES("71", "core", "radio", "ru", "radio_loading", "Загрузка...");',
'INSERT INTO `translate` VALUES("72", "events", "form", "ru", "event_title", "Заголовок");',
'INSERT INTO `translate` VALUES("73", "events", "form", "ru", "event_title_info", "");',
'INSERT INTO `translate` VALUES("74", "events", "form", "ru", "event_text", "Текст новости");',
'INSERT INTO `translate` VALUES("75", "events", "form", "ru", "event_text_info", "");',
'INSERT INTO `translate` VALUES("76", "events", "form", "ru", "event_look", "Подробная информация");',
'INSERT INTO `translate` VALUES("77", "events", "form", "ru", "event_look_info", "");',
'INSERT INTO `translate` VALUES("78", "events", "form", "ru", "event_date", "День события");',
'INSERT INTO `translate` VALUES("79", "events", "form", "ru", "event_date_info", "");',
'INSERT INTO `translate` VALUES("80", "events", "form", "ru", "event_time", "Время события");',
'INSERT INTO `translate` VALUES("81", "events", "form", "ru", "event_time_info", "");',
'INSERT INTO `translate` VALUES("82", "events", "main", "ru", "events_main_title", "События");',
'INSERT INTO `translate` VALUES("83", "events", "main", "ru", "events_main_today", "Сегодня");',
'INSERT INTO `translate` VALUES("84", "events", "main", "ru", "events_main_whom", "событие");',
'INSERT INTO `translate` VALUES("85", "events", "main", "ru", "Jan", "Январь");',
'INSERT INTO `translate` VALUES("86", "events", "main", "ru", "Feb", "Февраль");',
'INSERT INTO `translate` VALUES("87", "events", "main", "ru", "Mar", "Март");',
'INSERT INTO `translate` VALUES("88", "events", "main", "ru", "Apr", "Апрель");',
'INSERT INTO `translate` VALUES("89", "events", "main", "ru", "May", "Май");',
'INSERT INTO `translate` VALUES("90", "events", "main", "ru", "Jun", "Июнь");',
'INSERT INTO `translate` VALUES("91", "events", "main", "ru", "Jul", "Июль");',
'INSERT INTO `translate` VALUES("92", "events", "main", "ru", "Aug", "Август");',
'INSERT INTO `translate` VALUES("93", "events", "main", "ru", "Sep", "Сентябрь");',
'INSERT INTO `translate` VALUES("94", "events", "main", "ru", "Oct", "Октябрь");',
'INSERT INTO `translate` VALUES("95", "events", "main", "ru", "Nov", "Ноябрь");',
'INSERT INTO `translate` VALUES("96", "events", "main", "ru", "Dec", "Декабрь");',
'INSERT INTO `translate` VALUES("97", "events", "main", "ru", "events_hide_show", "Подробнее");',
'INSERT INTO `translate` VALUES("98", "quotes", "form", "ru", "quote_author", "Автор");',
'INSERT INTO `translate` VALUES("99", "quotes", "form", "ru", "quote_author_info", "");',
'INSERT INTO `translate` VALUES("100", "quotes", "form", "ru", "quote_quote", "Текст цитаты");',
'INSERT INTO `translate` VALUES("101", "quotes", "form", "ru", "quote_quote_info", "");',
'INSERT INTO `translate` VALUES("102", "quotes", "main", "ru", "quotes_main_title", "Цитата");',
'INSERT INTO `translate` VALUES("103", "quotes", "main", "ru", "quotes_main_whom", "цитату");',
'INSERT INTO `translate` VALUES("104", "quotes", "main", "ru", "quotes_else", "Еще");',
'CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `role` varchar(20) NOT NULL DEFAULT \'member\',
  `password` varchar(50) NOT NULL,
  `csrf` varchar(60) NOT NULL,
  `date` int(11) NOT NULL,
  `error_count` int(1) NOT NULL DEFAULT \'0\',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8',
'INSERT INTO `users` VALUES("1", "BuglerV", "admin", "202cb962ac59075b964b07152d234b70", "====ba6b5b5924d8a770c5be66e033b7e525====", "0", "0");',
'CREATE TABLE `windows` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `module_id` int(10) NOT NULL,
  `name` varchar(100) NOT NULL,
  `enabled` int(1) NOT NULL DEFAULT \'0\',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8',
'INSERT INTO `windows` VALUES("3", "2", "Post", "0");',
'INSERT INTO `windows` VALUES("4", "2", "View", "1");',
'INSERT INTO `windows` VALUES("6", "4", "Event", "1");',
'INSERT INTO `windows` VALUES("7", "3", "Quote", "1");',
'INSERT INTO `windows` VALUES("8", "1", "Time", "1");',
'INSERT INTO `windows` VALUES("9", "1", "Link", "1");',
'INSERT INTO `windows` VALUES("10", "1", "Chat", "1");',
'INSERT INTO `windows` VALUES("11", "1", "FeedBack", "0");',
];